/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visao.view;

import dados.DAO.DicionarioDAO;
import visao.tools.IJframe;
import entidades.entity.Projeto;
import visao.view.JTable.CustomRenderer;
import visao.view.SRSJTree.Root;
import entidades.entity.Conceito;
import controle.intellisense.AbstractParser;
import controle.intellisense.IntellisenseListener;
import controle.intellisense.ParserDescricaoCasoDeUso;
import controle.intellisense.ParserDescricaoFuncao;
import controle.intellisense.ParserNomeAtor;
import controle.intellisense.ParserNomeCasoDeUso;
import java.awt.Color;
import java.awt.EventQueue;
import java.beans.Beans;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.RollbackException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.JTextComponent;
import visao.view.tools.Arquivo;
import visao.view.tools.Constante;
import visao.view.tools.ConstrutorDeAcao;
import visao.view.tools.Timer;

/**
 *
 * @author helcio.soares
 */
public class CasoDeUsoView extends JPanel implements IJframe {

    private Projeto projeto;
    private String sentencaAnterior;
    public static JTextArea textAreaSelecionado;
    public static FluxoCasoDeUsoView fluxoCasoDeUso;

    public CasoDeUsoView() {
        fluxoCasoDeUso = new FluxoCasoDeUsoView(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("SRSEDITORPU").createEntityManager();
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT c FROM CasoDeUso c where c.idProjeto = :pIdProjeto ");
        query.setParameter("pIdProjeto", this.projeto);
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jEditorPane3 = new javax.swing.JEditorPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nomeField = new javax.swing.JTextField();
        nomeAtor = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JEditorPane();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextPane3 = new javax.swing.JEditorPane();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextPane4 = new javax.swing.JEditorPane();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JEditorPane();

        FormListener formListener = new FormListener();

        jLabel3.setText("jLabel3");

        jScrollPane2.setViewportView(jEditorPane1);

        jScrollPane4.setViewportView(jEditorPane3);

        setMaximumSize(new java.awt.Dimension(662, 468));
        setMinimumSize(new java.awt.Dimension(662, 468));
        setPreferredSize(new java.awt.Dimension(662, 468));
        setLayout(new java.awt.GridBagLayout());

        masterTable.setToolTipText("Clique duas vezes para abrir a tela de fluxos");

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, masterTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nome}"));
        columnBinding.setColumnName("Nome");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${ator}"));
        columnBinding.setColumnName("Ator");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${proposito}"));
        columnBinding.setColumnName("Proposito");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        masterTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent evt) {
                if (evt.getValueIsAdjusting()) {
                    return;
                }
                int selected = masterTable.getSelectedRow(); //Use getSelectedRows se vc permite seleção múltipla
                //faça algo com selected
                int i = masterTable.getSelectedRow();
                FluxoCasoDeUsoView.casoDeUso = list.get(masterTable.convertRowIndexToModel(i));
                fluxoCasoDeUso.setCasoDeUso();
                sentencaAnterior = FluxoCasoDeUsoView.fluxoPrincipal.getText() + "#"+FluxoCasoDeUsoView.fluxoAlternativo.getText()+"#"+FluxoCasoDeUsoView.fluxoExcecao.getText();
                Constante.desenharArvores(sentencaAnterior);
                Editor.setTitulo(projeto.getDe() + "\\Caso de uso\\" + FluxoCasoDeUsoView.casoDeUso.getNome());
                }
            });
            masterTable.addMouseListener(formListener);
            jScrollPane1.setViewportView(masterTable);
            if (masterTable.getColumnModel().getColumnCount() > 0) {
                masterTable.getColumnModel().getColumn(0).setMinWidth(150);
                masterTable.getColumnModel().getColumn(0).setPreferredWidth(180);
                masterTable.getColumnModel().getColumn(0).setMaxWidth(200);
                masterTable.getColumnModel().getColumn(1).setMinWidth(150);
                masterTable.getColumnModel().getColumn(1).setPreferredWidth(180);
                masterTable.getColumnModel().getColumn(1).setMaxWidth(200);
            }

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            add(jScrollPane1, gridBagConstraints);

            jLabel1.setText("Nome:");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
            gridBagConstraints.weightx = 0.5;
            add(jLabel1, gridBagConstraints);

            jLabel2.setText("Ator principal:");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
            gridBagConstraints.weightx = 0.5;
            add(jLabel2, gridBagConstraints);

            org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nome}"), nomeField, org.jdesktop.beansbinding.BeanProperty.create("text"));
            bindingGroup.addBinding(binding);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 0.5;
            add(nomeField, gridBagConstraints);

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.ator}"), nomeAtor, org.jdesktop.beansbinding.BeanProperty.create("text"));
            bindingGroup.addBinding(binding);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 0.5;
            add(nomeAtor, gridBagConstraints);

            jLabel4.setText("Propósito:");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
            add(jLabel4, gridBagConstraints);

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.proposito}"), jTextPane1, org.jdesktop.beansbinding.BeanProperty.create("text"));
            bindingGroup.addBinding(binding);

            jScrollPane3.setViewportView(jTextPane1);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.gridheight = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 0.5;
            gridBagConstraints.weighty = 2.0;
            add(jScrollPane3, gridBagConstraints);

            jLabel5.setText("Descrição:");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
            add(jLabel5, gridBagConstraints);

            jLabel6.setText("Pré-condição:");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
            gridBagConstraints.weightx = 0.5;
            add(jLabel6, gridBagConstraints);

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.preCondicao}"), jTextPane3, org.jdesktop.beansbinding.BeanProperty.create("text"));
            bindingGroup.addBinding(binding);

            jScrollPane6.setViewportView(jTextPane3);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.gridheight = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 0.5;
            gridBagConstraints.weighty = 2.0;
            add(jScrollPane6, gridBagConstraints);

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.posCondicao}"), jTextPane4, org.jdesktop.beansbinding.BeanProperty.create("text"));
            bindingGroup.addBinding(binding);

            jScrollPane7.setViewportView(jTextPane4);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.gridheight = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 0.5;
            gridBagConstraints.weighty = 2.0;
            add(jScrollPane7, gridBagConstraints);

            jLabel7.setText("Pós-condição:");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
            gridBagConstraints.weightx = 0.5;
            add(jLabel7, gridBagConstraints);

            jTextPane2.addFocusListener(formListener);
            jScrollPane8.setViewportView(jTextPane2);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.gridheight = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weighty = 2.0;
            add(jScrollPane8, gridBagConstraints);

            bindingGroup.bind();
        }

        // Code for dispatching events from components to event handlers.

        private class FormListener implements java.awt.event.FocusListener, java.awt.event.MouseListener {
            FormListener() {}
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (evt.getSource() == jTextPane2) {
                    CasoDeUsoView.this.jTextPane2FocusGained(evt);
                }
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getSource() == masterTable) {
                    CasoDeUsoView.this.masterTableMouseClicked(evt);
                }
            }

            public void mouseEntered(java.awt.event.MouseEvent evt) {
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
            }

            public void mousePressed(java.awt.event.MouseEvent evt) {
            }

            public void mouseReleased(java.awt.event.MouseEvent evt) {
            }
        }// </editor-fold>//GEN-END:initComponents

    private void masterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_masterTableMouseClicked

        if (evt.getClickCount() == 2) {
            int[] selected = masterTable.getSelectedRows();
            FluxoCasoDeUsoView.casoDeUso = list.get(masterTable.convertRowIndexToModel(selected[0]));
            fluxoCasoDeUso.setCasoDeUso();
            Editor.jSplitPane3.setLeftComponent(fluxoCasoDeUso);
        }
    }//GEN-LAST:event_masterTableMouseClicked

    private void jTextPane2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextPane2FocusGained
        if (jTextPane2.getText().equals("") && !nomeAtor.getText().equals("") && !nomeField.equals("")){
            jTextPane2.setText("O sistema deve comportar-se como descrito na seguinte seqüência de interações quando o (a) " 
                    + nomeAtor.getText().toLowerCase() + " desejar " + nomeField.getText().toLowerCase()+".");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextPane2FocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JEditorPane jEditorPane3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JEditorPane jTextPane1;
    private javax.swing.JEditorPane jTextPane2;
    private javax.swing.JEditorPane jTextPane3;
    private javax.swing.JEditorPane jTextPane4;
    private java.util.List<entidades.entity.CasoDeUso> list;
    private javax.swing.JTable masterTable;
    public static javax.swing.JTextField nomeAtor;
    private javax.swing.JTextField nomeField;
    private javax.persistence.Query query;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setProjeto(Projeto projeto, int idTipoTabela) {
        this.projeto = projeto;
        initComponents();
        Color bg = masterTable.getSelectionBackground();
        CustomRenderer cr = new CustomRenderer(masterTable.getDefaultRenderer(Object.class), bg);
//        masterTable.setDefaultRenderer(Object.class, cr);
        if (!Beans.isDesignTime()) {
            entityManager.getTransaction().begin();
        }
        ativaListeners(FluxoCasoDeUsoView.fluxoPrincipal, new ParserDescricaoCasoDeUso(projeto));
        ativaListeners(FluxoCasoDeUsoView.fluxoAlternativo, new ParserDescricaoCasoDeUso(projeto));
        ativaListeners(FluxoCasoDeUsoView.fluxoExcecao, new ParserDescricaoCasoDeUso(projeto));
        ativaListeners(nomeField, new ParserNomeCasoDeUso(projeto));
        ativaListeners(nomeAtor, new ParserNomeAtor(projeto));

        if (masterTable.getModel().getRowCount() > 0) {
            masterTable.setRowSelectionInterval(0, 0);
        }

    }

    private void ativaListeners(JTextComponent jTextComponent, AbstractParser parse) {
        IntellisenseListener intellisenseListener = new IntellisenseListener(jTextComponent, parse);
        if (jTextComponent instanceof JTextField) {
            ((JTextField) jTextComponent).addActionListener(intellisenseListener);
        }

    }

    @Override
    public void validarSentenca() {
        Arquivo tempo = null;
        try {
            tempo = new Arquivo("tempoValidarCasoDeUso.dat", true);
        } catch (IOException ex) {
            Logger.getLogger(CasoDeUsoView.class.getName()).log(Level.SEVERE, null, ex);
        }
        Timer timer = new Timer();

        ParserDescricaoCasoDeUso parser = new ParserDescricaoCasoDeUso(projeto);

        try {
//        String frase = FluxoCasoDeUsoView.fluxoPrincipal.getText() + "#" + FluxoCasoDeUsoView.fluxoAlternativo.getText() + "#" + FluxoCasoDeUsoView.fluxoExcecao.getText();
            String t = FluxoCasoDeUsoView.fluxoPrincipal.getDocument().getText(0, FluxoCasoDeUsoView.fluxoPrincipal.getDocument().getLength());
        } catch (BadLocationException ex) {
            Logger.getLogger(CasoDeUsoView.class.getName()).log(Level.SEVERE, null, ex);
        }

        String frase = FluxoCasoDeUsoView.fluxoPrincipal.getText() + "#" + FluxoCasoDeUsoView.fluxoAlternativo.getText() + "#" + FluxoCasoDeUsoView.fluxoExcecao.getText();
        //String frase = fluxoPrincipal.getText();
        try {
            timer.elapsed("Inicio");
            Root raiz = parser.validarSentenca(frase);
            if (!frase.equals(sentencaAnterior)) {
                Constante.arvoresSentencas.remove(sentencaAnterior);
            }
            Constante.arvoresSentencas.put(frase, raiz);
            tempo.escreveArquivo(timer.elapsed("fim") + "\n");
            tempo.fecha();
        } catch (Exception ex) {
            Logger.getLogger(TabelaView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    @Override
    public void incluir() {
        entidades.entity.CasoDeUso t = new entidades.entity.CasoDeUso();
        t.setIdProjeto(this.projeto);
        entityManager.persist(t);
        list.add(t);
        int row = list.size() - 1;
        masterTable.setRowSelectionInterval(row, row);
        masterTable.scrollRectToVisible(masterTable.getCellRect(row, 0, true));
    }

    @Override
    public void salvar() {
        if (!entityManager.getTransaction().isActive()) {
            entityManager.getTransaction().begin();
        }

        int[] selected = masterTable.getSelectedRows();
        entidades.entity.CasoDeUso t1 = list.get(masterTable.convertRowIndexToModel(selected[0]));

        t1.setFluxoAlternativo(FluxoCasoDeUsoView.fluxoAlternativo.getText());
        t1.setFluxoExcecao(FluxoCasoDeUsoView.fluxoExcecao.getText());
        t1.setFluxoPrincipal(FluxoCasoDeUsoView.fluxoPrincipal.getText());

        String lemma = null;
        try {
            lemma = Constante.recuperarLemmaDaPalavra(nomeField.getText());
            t1.setNomeLemma(lemma);

            DicionarioDAO dicionarioDAO = new DicionarioDAO();
            String sinonimo = dicionarioDAO.recuperarSinonimoPorChave1(lemma, projeto);
            if (!sinonimo.isEmpty()) {
                int resultado = JOptionPane.showConfirmDialog(null, "'" + sinonimo + "' é sinonimo de '" + nomeField.getText()
                        + "', deseja utilizá-lo? \n Se não a operação será cancelada!", "Alerta!", JOptionPane.YES_NO_OPTION);
                if (resultado == JOptionPane.YES_OPTION) {
                    Conceito c = dicionarioDAO.recuperarConceitoPorLemmaNome(sinonimo, projeto.getId());
                    t1.setNome(c.getDe());
                    t1.setNomeLemma(c.getNomeLemma());
                } else {
                    return;
                }
            }

            ConstrutorDeAcao construtorDeAcao = new ConstrutorDeAcao();
            construtorDeAcao.gravarAcao(nomeField.getText().toLowerCase());
            entityManager.getTransaction().commit();
            entityManager.getTransaction().begin();
        } catch (RollbackException rex) {
            JOptionPane.showMessageDialog(null, "Já existe um registro com esse nome!");
        } catch (Exception ex) {
            Logger.getLogger(CasoDeUsoView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void refresh() {
        entityManager.getTransaction().rollback();
        entityManager.getTransaction().begin();
        java.util.Collection data = query.getResultList();
        for (Object entity : data) {
            entityManager.refresh(entity);
        }
        list.clear();
        list.addAll(data);
    }

    @Override
    public void deletar() {
        int[] selected = masterTable.getSelectedRows();
        if (!entityManager.getTransaction().isActive()) {
            entityManager.getTransaction().begin();
        }
        entidades.entity.CasoDeUso t = list.get(masterTable.convertRowIndexToModel(selected[0]));
        try {

            int resultado = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja apagar o caso de uso " + nomeField.getText()+"?"
            , "Alerta!", JOptionPane.YES_NO_OPTION);
            if (resultado == JOptionPane.YES_OPTION) {
                entityManager.remove(entityManager.merge(t));
                entityManager.getTransaction().commit();
                //list.remove(t);
                list.remove(t.getId());
            } else {
                return;
            }
        } catch (javax.persistence.RollbackException e) {
            JOptionPane.showMessageDialog(null, "O caso de uso nao pode ser deletado!");
        }
        if (selected[0] > list.size() - 1) {
            masterTable.setRowSelectionInterval(list.size() - 1, list.size() - 1);
        } else {
            masterTable.setRowSelectionInterval(selected[0], selected[0]);
        }
    }

    @Override
    public void validarTodasSentenca() {
        validar();
    }

    private void validar() {
        for (int i = 0; i <= list.size() - 1; i++) {
            entidades.entity.CasoDeUso t1 = list.get(i);
            masterTable.setRowSelectionInterval(i, i);
            masterTable.scrollRectToVisible(masterTable.getCellRect(i, 0, true));
            validarSentenca();
        }
    }
}

//        DefaultHighlighter.DefaultHighlightPainter highlightPainter
//                = new DefaultHighlighter.DefaultHighlightPainter(Color.YELLOW);
//        try {
//            fluxoPrincipal.getHighlighter().addHighlight(1, 10, highlightPainter);
//        } catch (BadLocationException ex) {
//            Logger.getLogger(CasoDeUsoView.class.getName()).log(Level.SEVERE, null, ex);
//        }
